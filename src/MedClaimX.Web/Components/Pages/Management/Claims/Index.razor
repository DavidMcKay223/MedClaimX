@page "/Claims/"
@rendermode InteractiveServer
@using MedClaimX.Core.Management
@using MedClaimX.Core.Contracts
@inject AuthenticationStateProvider AuthStateProvider
@inject IClaimService ClaimService
@inject ILogger<Claim> Logger
@inject IDialogService DialogService

<MudPopoverProvider />
<MudSnackbarProvider />
<MudDialogProvider />

<MudText Typo="Typo.h4">
    Claims
</MudText>

@if (Claims == null)
{
    <MudPaper>
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
        <MudText Typo="Typo.subtitle1" Class="text-muted">Loading Claims...</MudText>
    </MudPaper>
}
else if (!Claims.Any())
{
    <MudPaper>
        <MudText Typo="Typo.subtitle1" Color="Color.Warning">
            <MudIcon Icon="@Icons.Material.Filled.Info"/>
            No Claims.
        </MudText>
    </MudPaper>
}
else
{
    <MudCard Elevation="1">
        <MudCardContent>
            <MudTable Items="@Claims" Hover="true" Striped="true" Bordered="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Claim Number</MudTh>
                    <MudTh>Patient First Name</MudTh>
                    <MudTh>Patient Last Name</MudTh>
                    <MudTh>Primary State</MudTh>
                    <MudTh>Secondary State</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Claim Number">@context.ClaimNumber</MudTd>
                    <MudTd DataLabel="Patient First Name">@context.FirstName</MudTd>
                    <MudTd DataLabel="Patient Last Name">@context.LastName</MudTd>
                    <MudTd DataLabel="Primary State">@context.PrimaryAddress.State</MudTd>
                    <MudTd DataLabel="Secondary State">@context.SecondaryAddress.State</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => EditClaimAsync(context)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Secondary" OnClick="() => ViewClaimAsync(context)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteClaimAsync(context)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>
}

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowNewClaimDialog">
    <MudIcon Icon="@Icons.Material.Filled.Add" />
    New Claim
</MudButton>

@code{
    private String userId = string.Empty;
    private List<Claim>? Claims = null;
    private Claim? newClaim = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var auth = await AuthStateProvider.GetAuthenticationStateAsync();
            userId = auth.User?.Identity?.Name ?? string.Empty;

            await LoadItems();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during component initialization for user {UserId}", userId);
        }
    }

    private async Task LoadItems()
    {
        try
        {
            Claims = await ClaimService.GetAllClaimsAsync(userId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading Claims list items for user {UserId}", userId);
            Claims = new();
        }
    }

    private async Task OnNewClaim(Claim claim)
    {
        try
        {
            if (claim != null)
            {
                await ClaimService.CreateClaimAsync(userId, claim);
                newClaim = null;
                await LoadItems();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding new Claim for user {UserId}", userId);
        }
    }

    private void OnCancelClaim()
    {
        newClaim = null;
        StateHasChanged();
    }

    private async Task ShowNewClaimDialog()
    {
        var parameters = new DialogParameters
        {
            { "Claim", new Claim { PrimaryAddress = new(), SecondaryAddress = new() } }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true, BackdropClick = false, FullScreen = true };

        var dialog = await DialogService.ShowAsync<MedClaimX.Web.Components.UI.Management.Claims.NewItem>(null, parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data is Claim savedClaim)
        {
            await ClaimService.CreateClaimAsync(userId, savedClaim);
            await LoadItems();
        }
    }

    private async Task ViewClaimAsync(Claim claim)
    {
        var parameters = new DialogParameters { ["Claim"] = claim };

        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true, BackdropClick = false, FullScreen = true };

        await DialogService.ShowAsync<MedClaimX.Web.Components.UI.Management.Claims.Card>(null, parameters, options);
    }

    private async Task EditClaimAsync(Claim claim)
    {
        var parameters = new DialogParameters { ["Claim"] = claim };

        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true, BackdropClick = false, FullScreen = true };

        var dialog = await DialogService.ShowAsync<MedClaimX.Web.Components.UI.Management.Claims.Form> (null, parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data is Claim updated)
        {
            await ClaimService.UpdateClaimAsync(userId, updated);
            await LoadItems();
        }
    }

    private async Task DeleteClaimAsync(Claim claim)
    {
        bool? confirmed = await DialogService.ShowMessageBox(
            "Delete Confirmation",
            $"Are you sure you want to delete claim {claim.ClaimNumber}?",
            yesText: "Yes", cancelText: "Cancel");

        if (confirmed == true)
        {
            await ClaimService.DeleteClaimAsync(claim.Id);
            Claims = await ClaimService.GetAllClaimsAsync("user-id-placeholder");
        }
    }
}
